#!/usr/bin/env python3

import numpy as np
import rospy
from sensor_msgs.msg import Image, LaserScan, CameraInfo
from cv_bridge import CvBridge
import cv2
import message_filters

# ---------------------------------------------------
#   Parameters
# ---------------------------------------------------

# Masks - Color ranges
# TODO Verificar valores
# Red color

lower_red = np.array([0, 0, 90])
upper_red = np.array([40, 40, 256])

# Green color
lower_green = np.array([0, 90, 0])
upper_green = np.array([40, 256, 40])

# Blue color
lower_blue = np.array([90, 0, 0])
upper_blue = np.array([256, 40, 40])


class Driver:
    def __init__(self):
        # Get team, hunter and prey
        self.bridge = CvBridge()
        self.backcameraimage = None
        self.frontcameraimage = None
        self.allplayers = {'red': rospy.get_param('/red_players'),
                           'green': rospy.get_param('/green_players'),
                           'blue': rospy.get_param('/blue_players')}
        self.player = rospy.get_name().strip('/')
        if self.player in self.allplayers['red']:
            self.team = 'red'
            self.hunter = 'blue'
            self.prey = 'green'
        elif self.player in self.allplayers['green']:
            self.team = 'green'
            self.hunter = 'red'
            self.prey = 'blue'
        elif self.player in self.allplayers['blue']:
            self.team = 'blue'
            self.hunter = 'green'
            self.prey = 'red'
        else:
            self.team = 'Alone'
            self.hunter = 'No one'
            self.prey = 'No one'

        # Topics to subscribe
        topic_camera = "/" + self.player + '/camera/rgb/image_raw'
        topic_backcamera = "/" + self.player + '/back_camera/rgb/image_raw'
        topic_laser = "/" + self.player + '/scan'
        # Topics subscription
        # self.subscriber_laser = rospy.Subscriber(topic_laser, LaserScan, self.getLaserCallback)
        self.subscriber_camera = message_filters.Subscriber(topic_camera, Image)
        self.subscriber_backcamera = message_filters.Subscriber(topic_backcamera, Image)
        ts = message_filters.TimeSynchronizer([self.subscriber_camera, self.subscriber_backcamera], 1)
        ts.registerCallback(self.getCameraCallback)

    def getCameraCallback(self,data_front, data_back):
        cv_frontimage = self.bridge.imgmsg_to_cv2(data_front, "bgr8")
        cv_backimage = self.bridge.imgmsg_to_cv2(data_back, "bgr8")
        cv2.imshow('frente', cv_frontimage)
        cv2.imshow('tras', cv_backimage)
        cv2.waitKey(1)

    # def laser_to_camera(self, camera, laser_points):
    #     laser_points_cameraframe = []

    def team_identification_callback(self):
        return self.player, self.team, self.hunter, self.prey


def main():
    rospy.init_node('p_g3_driver', anonymous=False)
    # Testing

    rospy.loginfo("I'm " + Driver().player + ", from team " + Driver().team +
                  "\nI want to catch " + Driver().prey + " but I fear " + Driver().hunter)
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
